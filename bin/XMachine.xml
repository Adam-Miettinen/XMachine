<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XMachine</name>
    </assembly>
    <members>
        <member name="T:XMachine.Components.Collections.XAutoCollections">
            <summary>
            The <see cref="T:XMachine.Components.Collections.XAutoCollections"/> component automatically assigns <see cref="T:XMachine.XTypeComponent`1"/>s
            to all supported collection types.
            </summary>
        </member>
        <member name="P:XMachine.Components.Collections.XAutoCollections.ItemName">
            <summary>
            The default <see cref="T:System.Xml.Linq.XName"/> used for collection elements.
            </summary>
        </member>
        <member name="P:XMachine.Components.Collections.XAutoCollections.KeyName">
            <summary>
            The <see cref="T:System.Xml.Linq.XName"/> used for the key of a dictionary entry (<see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            or <see cref="T:System.Collections.DictionaryEntry"/>).
            </summary>
        </member>
        <member name="P:XMachine.Components.Collections.XAutoCollections.ValueName">
            <summary>
            The <see cref="T:System.Xml.Linq.XName"/> used for the value of a dictionary entry (<see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            or <see cref="T:System.Collections.DictionaryEntry"/>).
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XAutoCollections.OnCreateXType``1(XMachine.XType{``0})">
            <summary>
            Adds an <see cref="T:XMachine.Components.Collections.XCollection`2"/> component to an eligible <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XAutoCollections.OnCreateXTypeLate``1(XMachine.XType{``0})">
            <summary>
            Apply additional customizatoin, and disable <see cref="T:XMachine.Components.Collections.XCollection`2"/> components 
            for types that have an <see cref="T:XMachine.Components.XTexter`1"/> or <see cref="T:XMachine.Components.XBuilderComponent`1"/>.
            </summary>
        </member>
        <member name="T:XMachine.Components.Collections.XCollection`1">
            <summary>
            A single-parameter generic that serves as an abstract base for <see cref="T:XMachine.Components.Collections.XCollection`2"/>.
            </summary>
        </member>
        <member name="F:XMachine.Components.Collections.XCollection`1.PlaceholderObject">
            <summary>
            An object used to denote an unassigned value in a collection.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:XMachine.Components.Collections.XCollection`1"/>.
            </summary>
        </member>
        <member name="P:XMachine.Components.Collections.XCollection`1.ItemName">
            <summary>
            Get or set the <see cref="T:System.Xml.Linq.XName"/> that will identify collection items.
            </summary>
        </member>
        <member name="P:XMachine.Components.Collections.XCollection`1.ItemsAsElements">
            <summary>
            If <see cref="P:XMachine.Components.Collections.XCollection`1.ItemsAsElements"/> is true, this collection will behave as if tagged with <see cref="T:System.Xml.Serialization.XmlElementAttribute"/>.
            Items will not be wrapped in an element.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`1.EnumerateItems(`0)">
            <summary>
            Override this method to alter how items are enumerated for writing.
            </summary>
        </member>
        <member name="T:XMachine.Components.Collections.XCollection`2">
            <summary>
            An abstract implementation of <see cref="T:XMachine.XTypeComponent`1"/> that handles collection types.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`2.#ctor">
            <summary>
            Create a new instance of <see cref="T:XMachine.Components.Collections.XCollection`2"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`2.AddItem(`0,`1)">
            <summary>
            Implement this method to provide an "Add" method for the collection implementation.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`2.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})">
            <summary>
            Scans for elements representing collection items and reads them.
            </summary>
        </member>
        <member name="M:XMachine.Components.Collections.XCollection`2.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)">
            <summary>
            Writes collection items as elements in the order provided by the collection's enumerator.
            </summary>
        </member>
        <member name="T:XMachine.Components.Constructors.ConstructorAccess">
            <summary>
            Bit flags that determine, by default, what access levels of parameterless constructors
            will be used to construct objects read from XML.
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.Public">
            <summary>
            Only public constructors are allowed
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.ProtectedInternal">
            <summary>
            Public and protected internal constructors are allowed
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.Internal">
            <summary>
            Public, protected internal and internal constructors are allowed
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.Protected">
            <summary>
            Public, protected internal and protected constructors are allowed
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.PrivateProtected">
            <summary>
            Public, protected internal, internal, protected and private protected constructors are allowed
            </summary>
        </member>
        <member name="F:XMachine.Components.Constructors.ConstructorAccess.Private">
            <summary>
            All constructors are allowed
            </summary>
        </member>
        <member name="T:XMachine.Components.Constructors.XAutoConstructors">
            <summary>
            This extension manages the selection of parameterless constructors for types.
            </summary>
        </member>
        <member name="P:XMachine.Components.Constructors.XAutoConstructors.AccessIncluded">
            <summary>
            Get or set a <see cref="T:XMachine.Components.Constructors.ConstructorAccess"/> bitflag that determines the access level a parameterless
            constructor must have for it to be used to construct an object read from XML. By default,
            parameterless constructors must be public. Altering this value will not change the treatment of
            types defined in Microsoft core libraries, types defined in an assemly tagged with 
            <see cref="T:XMachine.XMachineAssemblyAttribute"/>, or any types that have already been reflected (read or
            written).
            </summary>
        </member>
        <member name="M:XMachine.Components.Constructors.XAutoConstructors.OnCreateXType``1(XMachine.XType{``0})">
            <summary>
            Finds a suitable constructor and assigns it
            </summary>
        </member>
        <member name="M:XMachine.Components.Constructors.XAutoConstructors.OnCreateXTypeLate``1(XMachine.XType{``0})">
            <summary>
            Disable <see cref="T:XMachine.Components.Constructors.XConstructor`1"/> component for types that have an <see cref="T:XMachine.Components.XTexter`1"/> or
            <see cref="T:XMachine.Components.XBuilderComponent`1"/>.
            </summary>
        </member>
        <member name="T:XMachine.Components.Constructors.XConstructor`1">
            <summary>
            An <see cref="T:XMachine.XTypeComponent`1"/> representing a parameterless constructor
            </summary>
        </member>
        <member name="M:XMachine.Components.Constructors.XConstructor`1.#ctor(System.Func{`0})">
            <summary>
            Create a new <see cref="T:XMachine.Components.Constructors.XConstructor`1"/> using the given delegate.
            </summary>
        </member>
        <member name="P:XMachine.Components.Constructors.XConstructor`1.Constructor">
            <summary>
            Get or set the constructor delegate
            </summary>
        </member>
        <member name="M:XMachine.Components.Constructors.XConstructor`1.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})">
            <summary>
            Add the constructor as a builder task.
            </summary>
        </member>
        <member name="T:XMachine.Components.Identifiers.XCompositeIdentifier">
            <summary>
            Combines multiple <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects into a single object that can
            assign IDs and perform equality comparisons for all of them.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.#ctor">
            <summary>
            Create a new, empty <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.#ctor(XMachine.Components.Identifiers.XCompositeIdentifier)">
            <summary>
            Create a new <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> that copies the contents of the given 
            <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.GetId(System.Object)">
            <summary>
            Returns the ID produced by the first <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> with a matching object
            type.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.CanId(System.Type)">
            <summary>
            Check whether any <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> in this <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> is
            able to assign an ID to objects of the given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.CanId(System.Type,System.Type@)">
            <summary>
            Check whether any <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> in this <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> is
            able to assign an ID to objects of the given <see cref="T:System.Type"/>. If <c>true</c>, the out parameter
            contains the <see cref="T:System.Type"/> of the ID.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.Identify``2(XMachine.Components.Identifiers.XIdentifier{``0,``1})">
            <summary>
            Add a new <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> to this <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XCompositeIdentifier.ClearIdentities``1">
            <summary>
            Remove any <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> from this <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> if its
            reference type is assignable to <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="T:XMachine.Components.Identifiers.XIdentifier`2">
            <summary>
            <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> enables in-XML references for objects of type <typeparamref name="TType"/>
            by assigning them unique identifiers of type <typeparamref name="TId"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.Create(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Create a new <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> from the given delegate and optional 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.#ctor">
            <summary>
            Create a new <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> using the default equality comparer on IDs.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.#ctor(System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Create a new <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> using the given equality comparer for IDs.
            </summary>
        </member>
        <member name="P:XMachine.Components.Identifiers.XIdentifier`2.KeyComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare IDs for equality.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.GetId(`0)">
            <summary>
            Implement this method to assign a unique object of type <typeparamref name="TId"/> to an object of
            type <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.Equals(`0,`0)">
            <summary>
            Uses <see cref="M:XMachine.Components.Identifiers.XIdentifier`2.GetId(`0)"/> and <see cref="P:XMachine.Components.Identifiers.XIdentifier`2.KeyComparer"/> to determine equality between two objects 
            of type <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifier`2.GetHashCode(`0)">
            <summary>
            use <see cref="P:XMachine.Components.Identifiers.XIdentifier`2.KeyComparer"/> to generate a hashcode from the ID of <paramref name="obj"/>.
            </summary>
        </member>
        <member name="T:XMachine.Components.Identifiers.XIdentifierReader">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XIdentifierReader"/> represents a set of <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects active 
            on an <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="P:XMachine.Components.Identifiers.XIdentifierReader.Identifier">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> object used by <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> to store 
            <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects affecting this read operation.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierReader.OnRead(XMachine.IXReadOperation,System.Xml.Linq.XElement,System.Type,System.Func{System.Object,System.Boolean},System.Func{System.Boolean}@)">
            <summary>
            Resolves the element as a reference if possible
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierReader.OnRead(XMachine.IXReadOperation,System.Xml.Linq.XAttribute,System.Type,System.Func{System.Object,System.Boolean},System.Func{System.Boolean}@)">
            <summary>
            Resolves the attribute as a reference if possible
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierReader.OnSubmit(XMachine.IXReadOperation,System.Object,System.Func{System.Boolean}@)">
            <summary>
            Register a constructed object as a reference
            </summary>
        </member>
        <member name="T:XMachine.Components.Identifiers.XIdentifiers">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> component controls the reading and writing of object references in XML.
            </summary>
        </member>
        <member name="P:XMachine.Components.Identifiers.XIdentifiers.Identifier">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> object used by <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> to store global
            <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifiers.OnCreateReader(XMachine.XReader)">
            <summary>
            Registers an <see cref="T:XMachine.XReaderComponent"/> that enables reading with references.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifiers.OnCreateWriter(XMachine.XWriter)">
            <summary>
            Registers an <see cref="T:XMachine.XWriterComponent"/> that enables writing with references.
            </summary>
        </member>
        <member name="T:XMachine.Components.Identifiers.XIdentifierWriter">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XIdentifierWriter"/> represents a set of <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects active 
            on an <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="P:XMachine.Components.Identifiers.XIdentifierWriter.Identifier">
            <summary>
            The <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> object used by <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> to store 
            <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> objects affecting this write operation.
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierWriter.OnWrite(XMachine.IXWriteOperation,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Record the written object as a reference
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierWriter.OnWrite(XMachine.IXWriteOperation,System.Object,System.Xml.Linq.XAttribute)">
            <summary>
            Record the written object as a reference
            </summary>
        </member>
        <member name="M:XMachine.Components.Identifiers.XIdentifierWriter.OnSubmit(XMachine.IXWriteOperation,System.Object)">
            <summary>
            Record a contextual object as a reference
            </summary>
        </member>
        <member name="T:XMachine.Components.Properties.PropertyAccess">
            <summary>
            Bitflags that determine what access levels of properties will be read from and written to XML.
            Readonly properties are not supported by default.
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PublicOnly">
            <summary>
            Must have public get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.ProtectedInternal">
            <summary>
            May have public or protected internal get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.Internal">
            <summary>
            May have public, protected internal, or internal get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.Protected">
            <summary>
            May have public, protected internal, or protected get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PrivateProtected">
            <summary>
            May have public, protected internal, protected, internal, or private protected get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.Private">
            <summary>
            May have any access level of get and set methods
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.ProtectedInternalGet">
            <summary>
            May have a public or protected internal get method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.ProtectedInternalSet">
            <summary>
            May have a public or protected internal set method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.InternalGet">
            <summary>
            May have a public, protected internal or internal get method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.InternalSet">
            <summary>
            May have a public, protected internal or internal set method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.ProtectedGet">
            <summary>
            May have a public, protected internal or protected get method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.ProtectedSet">
            <summary>
            May have a public, protected internal or protected set method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PrivateProtectedGet">
            <summary>
            May have a public, protected internal, protected, internal, or private protected get method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PrivateProtectedSet">
            <summary>
            May have a public, protected internal, protected, internal, or private protected set method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PrivateGet">
            <summary>
            May have any access level get method
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyAccess.PrivateSet">
            <summary>
            May have any access level set method
            </summary>
        </member>
        <member name="T:XMachine.Components.Properties.PropertyWriteMode">
            <summary>
            Ways in which a property may be written to an XML element.
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyWriteMode.Element">
            <summary>
            Write the property as a child element (necessary for complex objects)
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyWriteMode.Attribute">
            <summary>
            Write the property as an attribute
            </summary>
        </member>
        <member name="F:XMachine.Components.Properties.PropertyWriteMode.Text">
            <summary>
            Write the property as inner text (maximum 1 such property per object)
            </summary>
        </member>
        <member name="T:XMachine.Components.Properties.XAutoProperties">
            <summary>
            This extension automatically scans <see cref="T:System.Type"/>s for properties and adds 
            <see cref="T:XMachine.Components.Properties.XProperties`1"/>s to new <see cref="T:XMachine.XType`1"/>s that allow
            them to read and write those properties.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XAutoProperties.AccessIncluded">
            <summary>
            Get or set a <see cref="T:XMachine.Components.Properties.PropertyAccess"/> bitflag that determines the access levels that object
            properties must have for them to be read from or written to XML. By default, properties must
            have public Get and Set methods. Altering this value will not change the treatment of primitive
            types, types defined in an assembly tagged with <see cref="T:XMachine.XMachineAssemblyAttribute"/>, or types 
            that have already been reflected.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XAutoProperties.TypesIncluded">
            <summary>
            A predicate that will be applied to the <see cref="T:System.Type"/> represented by an <see cref="T:XMachine.XType`1"/>
            before an <see cref="T:XMachine.Components.Properties.XProperties`1"/> is added.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XAutoProperties.PropertiesIncluded">
            <summary>
            A predicate that will be applied to individual <see cref="T:System.Reflection.PropertyInfo"/> objects before they are added
            to a new <see cref="T:XMachine.Components.Properties.XProperties`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XAutoProperties.OnCreateXType``1(XMachine.XType{``0})">
            <summary>
            Scans the <see cref="T:System.Type"/> for properties and adds an <see cref="T:XMachine.Components.Properties.XProperties`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XAutoProperties.OnCreateXTypeLate``1(XMachine.XType{``0})">
            <summary>
            Disable <see cref="T:XMachine.Components.Properties.XProperties`1"/> components for types that have an <see cref="T:XMachine.Components.XTexter`1"/> or
            <see cref="T:XMachine.Components.XBuilderComponent`1"/>. Also adds support for certain readonly properties.
            </summary>
        </member>
        <member name="T:XMachine.Components.Properties.XProperties`1">
            <summary>
            Enables the reading and writing of object properties by <see cref="T:XMachine.XType`1"/>s.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XProperties`1.WriteIf">
            <summary>
            An optional predicate affecting all properties.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.Add``1(XMachine.Components.Properties.XProperty{`0,``0})">
            <summary>
            Add a new property of the given type, represented by an <see cref="T:XMachine.Components.Properties.XProperty`2"/>
            object.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.Remove``1(XMachine.Components.Properties.XProperty{`0,``0})">
            <summary>
            Removes the given property.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.Remove(System.Xml.Linq.XName)">
            <summary>
            Removes the property with the given <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.Get``1(System.Xml.Linq.XName)">
            <summary>
            Retrieves the property of the given type and with the given <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.Get``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Retrieve the property identified by the given LINQ expression if it exists on this object and has
            the default <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith">
            <summary>
            Removes any parametered constructor from the component.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,`0})">
            <summary>
            Instructs the component to deserialize the given property before construction, and to use either the given
            constructor or a constructor that takes a single parameter of type <typeparamref name="TArg1"/> with a 
            name equal to the given property's (ignoring case).
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``1(XMachine.Components.Properties.XProperty{`0,``0},System.Func{``0,`0})">
            <summary>
            Instructs the component to deserialize the given property before construction, and to use either the given
            constructor or a constructor that takes a single parameter of type <typeparamref name="TArg1"/> with a 
            name equal to the given property's (ignoring case).
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{``0,``1,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes two parameters that match the order, types and names (case insensitive) 
            of the two properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``2(XMachine.Components.Properties.XProperty{`0,``0},XMachine.Components.Properties.XProperty{`0,``1},System.Func{``0,``1,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes two parameters that match the order, types and names (case insensitive) 
            of the two properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Func{``0,``1,``2,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes three parameters that match the order, types and names (case insensitive) 
            of the three properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``3(XMachine.Components.Properties.XProperty{`0,``0},XMachine.Components.Properties.XProperty{`0,``1},XMachine.Components.Properties.XProperty{`0,``2},System.Func{``0,``1,``2,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes three parameters that match the order, types and names (case insensitive) 
            of the three properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``4(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{`0,``3}},System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes four parameters that match the order, types and names (case insensitive) 
            of the four properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.ConstructWith``4(XMachine.Components.Properties.XProperty{`0,``0},XMachine.Components.Properties.XProperty{`0,``1},XMachine.Components.Properties.XProperty{`0,``2},XMachine.Components.Properties.XProperty{`0,``3},System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Instructs the component to deserialize the given properties before construction, and to use either the given
            constructor or a constructor that takes four parameters that match the order, types and names (case insensitive) 
            of the four properties given.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})">
            <summary>
            Reads XML elements and attributes as properties and assign thems to the constructed object.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperties`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)">
            <summary>
            Retrieves properties from the object and writes them as XML.
            </summary>
        </member>
        <member name="T:XMachine.Components.Properties.XProperty`2">
            <summary>
            Represents a property of type <typeparamref name="TProperty"/> on an object of type <typeparamref name="TType"/>
            and contains instructions on how it should be read from and written to XML.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.#ctor(System.Xml.Linq.XName)">
            <summary>
            Create an <see cref="T:XMachine.Components.Properties.XProperty`2"/> with the given <see cref="T:System.Xml.Linq.XName"/>,
            which will be assigned to the readonly property <see cref="P:XMachine.Components.Properties.XProperty`2.Name"/>.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XProperty`2.Name">
            <summary>
            The readonly <see cref="T:System.Xml.Linq.XName"/> of this property.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XProperty`2.WriteIf">
            <summary>
            A predicate that tests whether to write this property to XML.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XProperty`2.WriteAs">
            <summary>
            How to write the property.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.WriteAsAttribute">
            <summary>
            Write this property as an attribute.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.WriteAsElement">
            <summary>
            Write this property as an element.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.WriteAsText">
            <summary>
            Write this property as inner element text.
            </summary>
        </member>
        <member name="P:XMachine.Components.Properties.XProperty`2.PropertyType">
            <summary>
            This method must return a <see cref="T:System.Type"/> object corresponding to <typeparamref name="TProperty"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.Get(`0)">
            <summary>
            Implementers must provide a get accessor for the property.
            </summary>
        </member>
        <member name="M:XMachine.Components.Properties.XProperty`2.Set(`0,`1)">
            <summary>
            Implementers must provide a set accessor for the property.
            </summary>
        </member>
        <member name="T:XMachine.Components.XBuilder`1">
            <summary>
            The <see cref="T:XMachine.Components.XBuilder`1"/> class instructs an <see cref="T:XMachine.XReader"/> or <see cref="T:XMachine.XWriter"/> how to deserialize or
            serialize an object of type <typeparamref name="T"/>. The <see cref="M:XMachine.Components.XBuilder`1.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})"/>
            and <see cref="M:XMachine.Components.XBuilder`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)"/> methods give you full access to the underlying
            serializer methods.
            </summary>
        </member>
        <member name="M:XMachine.Components.XBuilder`1.#ctor">
            <summary>
            Create a new <see cref="T:XMachine.Components.XBuilder`1"/> for a type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.Components.XBuilder`1.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})">
            <summary>
            Implement this method to build (read) an object of type <typeparamref name="T"/> from the <see cref="T:System.Xml.Linq.XElement"/>
            <paramref name="element"/> where it was serialized. The <see cref="T:XMachine.IXReadOperation"/> and <see cref="T:XMachine.ObjectBuilder`1"/>
            arguments let you schedule tasks to construct the object or modify its state.
            </summary>
        </member>
        <member name="M:XMachine.Components.XBuilder`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)">
            <summary>
            Implement this method to write an object of type <typeparamref name="T"/> to the given <see cref="T:System.Xml.Linq.XElement"/>. The 
            <see cref="T:XMachine.IXWriteOperation"/> argument contains several methods that let you generate <see cref="T:System.Xml.Linq.XAttribute"/>s
            and <see cref="T:System.Xml.Linq.XElement"/>s to represent the object's state.
            </summary>
        </member>
        <member name="T:XMachine.Components.XTexter`1">
            <summary>
            <see cref="T:XMachine.Components.XTexter`1"/> reads and writes an object of type <typeparamref name="T"/> to and from
            the string value of an XML attribute or element. This is ideal for very simple objects.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTexter`1.#ctor(System.Func{System.String,`0},System.Func{`0,System.String})">
            <summary>
            Create a new text reader/writer using the given delegates.
            </summary>
        </member>
        <member name="P:XMachine.Components.XTexter`1.Reader">
            <summary>
            Get or set the reader delegate.
            </summary>
        </member>
        <member name="P:XMachine.Components.XTexter`1.Writer">
            <summary>
            Get or set the writer delegate. If no value or a null value is set, <typeparamref name="T"/>'s
            ToString() method will be used.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTexter`1.OnRead(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,System.Type,`0@)">
            <summary>
            Reads an object of type <typeparamref name="T"/> from the text of an element.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTexter`1.OnRead(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XAttribute,System.Type,`0@)">
            <summary>
            Reads an object of type <typeparamref name="T"/> from the text of an attribute.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTexter`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)">
            <summary>
            Write the object as a string into the given element.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTexter`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XAttribute)">
            <summary>
            Write the object as a string into the given attribute.
            </summary>
        </member>
        <member name="T:XMachine.Components.XTypeRuleAttribute">
            <summary>
            Apply this attribute to a static method in a public class to create global rules for <see cref="T:XMachine.XType`1"/>s.
            The method must have a signature of:<br />
            <c>static void AnyMethodName(XType&lt;T&gt; xType)</c><br />
            For some <see cref="T:System.Type"/> T. Whenever an instance of <see cref="T:XMachine.XDomain"/> generates an <see cref="T:XMachine.XType`1"/>
            of that type, your method will be invoked.
            </summary>
        </member>
        <member name="T:XMachine.Components.XTypeRules">
            <summary>
            A component that applies global rules to <see cref="T:XMachine.XType`1"/> objects when they are generated.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTypeRules.OnCreateXTypeLate``1(XMachine.XType{``0})">
            <summary>
            Apply rules to qualifying <see cref="T:XMachine.XType`1"/>s.
            </summary>
        </member>
        <member name="M:XMachine.Components.XTypeRules.OnInspectType(System.Type)">
            <summary>
            Check for methods tagged with <see cref="T:XMachine.Components.XTypeRuleAttribute"/>.
            </summary>
        </member>
        <member name="T:XMachine.IExceptionHandler">
            <summary>
            Represents an object that handles <see cref="T:System.Exception"/>s with a delegate method.
            </summary>
        </member>
        <member name="P:XMachine.IExceptionHandler.ExceptionHandler">
            <summary>
            Returns the delegate that handles <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="T:XMachine.IXComponent">
            <summary>
            An <see cref="T:XMachine.IXComponent"/> can be registered as a component with an <see cref="T:XMachine.IXWithComponents`1"/>.
            </summary>
        </member>
        <member name="P:XMachine.IXComponent.Enabled">
            <summary>
            Whether the component is enabled and should receive method calls.
            </summary>
        </member>
        <member name="T:XMachine.IXReadOperation">
            <summary>
            Represents an individual read operation initialized by a call to one of the methods in
            <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXReadOperation.Read``1(System.Xml.Linq.XElement,System.Func{``0,System.Boolean},XMachine.ReaderHints)">
            <summary>
            Reads the given <see cref="T:System.Xml.Linq.XElement"/> as an object assignable to the type <typeparamref name="T"/>,
            performing the given delegate once the object is successfully constructed.
            </summary>
        </member>
        <member name="M:XMachine.IXReadOperation.Read(System.Xml.Linq.XElement,System.Func{System.Object,System.Boolean},XMachine.ReaderHints)">
            <summary>
            Reads the given <see cref="T:System.Xml.Linq.XElement"/> as an object, performing the given delegate once the object 
            is successfully constructed.
            </summary>
        </member>
        <member name="M:XMachine.IXReadOperation.Read``1(System.Xml.Linq.XAttribute,System.Func{``0,System.Boolean},XMachine.ReaderHints)">
            <summary>
            Reads the given <see cref="T:System.Xml.Linq.XAttribute"/> as an object assignable to the type <typeparamref name="T"/>,
            performing the given delegate once the object is successfully constructed.
            </summary>
        </member>
        <member name="M:XMachine.IXReadOperation.Read(System.Xml.Linq.XElement,System.Type,System.Func{System.Object,System.Boolean},XMachine.ReaderHints)">
            <summary>
            Reads the given <see cref="T:System.Xml.Linq.XElement"/> as an object assignable to the type <paramref name="expectedType"/>,
            performing the given delegate once the object is successfully constructed. 
            </summary>
        </member>
        <member name="M:XMachine.IXReadOperation.Read(System.Xml.Linq.XAttribute,System.Type,System.Func{System.Object,System.Boolean},XMachine.ReaderHints)">
            <summary>
            Reads the given <see cref="T:System.Xml.Linq.XAttribute"/> as an object assignable to the type <paramref name="expectedType"/>,
            performing the given delegate once the object is successfully constructed. 
            </summary>
        </member>
        <member name="T:XMachine.IXWithComponents`1">
            <summary>
            Represents an object within <see cref="N:XMachine"/> whose functionality is represented by
            components, which are objects of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Component``1">
            <summary>
            Retrieve a component of the given type.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Components``1">
            <summary>
            Retrieve all components of the given type.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Components">
            <summary>
            Retrieve all components.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Register(`0)">
            <summary>
            Register a component.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Register(`0[])">
            <summary>
            Register components.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Deregister(`0)">
            <summary>
            Deregister a component.
            </summary>
        </member>
        <member name="M:XMachine.IXWithComponents`1.Deregister(`0[])">
            <summary>
            Deregister components.
            </summary>
        </member>
        <member name="T:XMachine.IXWriteOperation">
            <summary>
            Represents an operation of serializing objects to XML triggered by a call to one of the methods in
            <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteElement``1(``0)">
            <summary>
            Write the given object as an <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteElement(System.Object)">
            <summary>
            Write the given object as an <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteElement(System.Object,System.Type)">
            <summary>
            Write the given object as an <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <paramref name="expectedType"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteTo``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Write the given object to the given <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteTo(System.Xml.Linq.XElement,System.Object)">
            <summary>
            Write the given object to the given <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteTo(System.Xml.Linq.XElement,System.Object,System.Type)">
            <summary>
            Write the given object to the given <see cref="T:System.Xml.Linq.XElement"/> with a <see cref="T:System.Type"/> context of 
            <paramref name="expectedType"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteAttribute(System.Object,System.Xml.Linq.XName)">
            <summary>
            Write the given object as an <see cref="T:System.Xml.Linq.XAttribute"/> using the given <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.IXWriteOperation.WriteTo(System.Xml.Linq.XAttribute,System.Object)">
            <summary>
            Write the given object to the given <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
        </member>
        <member name="T:XMachine.Namers.AbstractXNamer">
            <summary>
            An implementation of <see cref="T:XMachine.XNamer"/> that caches all <see cref="T:System.Xml.Linq.XName"/>s for serializable types
            on initialization. This improves speed at the cost of some memory.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.#ctor">
            <summary>
            Create an uninitialized <see cref="T:XMachine.Namers.AbstractXNamer"/>.
            </summary>
        </member>
        <member name="P:XMachine.Namers.AbstractXNamer.Item(System.Type)">
            <summary>
            Get or set the <see cref="T:System.Xml.Linq.XName"/> associated with the given <see cref="T:System.Type"/>. Returns null if
            the <see cref="T:System.Type"/> is not eligible for a name.
            </summary>
        </member>
        <member name="P:XMachine.Namers.AbstractXNamer.Item(System.Xml.Linq.XName)">
            <summary>
            Retrieve the <see cref="T:System.Type"/> matching a given <see cref="T:System.Xml.Linq.XName"/> from the cache.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.GetType(System.Xml.Linq.XElement,System.Type)">
            <summary>
            Attempts to locate the <see cref="T:System.Type"/> matching the given <see cref="T:System.Xml.Linq.XElement"/>. Checks a dictionary
            of already-named types, and if no matching entry is found, delegates the task to the implementing
            class's <see cref="M:XMachine.Namers.AbstractXNamer.ParseXName(System.Xml.Linq.XName)"/> method.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.OnAssemblyScan(System.Reflection.Assembly)">
            <summary>
            Called when <see cref="N:XMachine"/> scans a new <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.GetName(System.Type)">
            <summary>
            Implement this method to provide a string name for a <see cref="T:System.Type"/> object.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.ParseXName(System.Xml.Linq.XName)">
            <summary>
            Override this method to parse, and retrieve a <see cref="T:System.Type"/> object for, an <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.Namers.AbstractXNamer.ResolveCollision(System.Xml.Linq.XName,System.Type,System.Type)">
            <summary>
            Override this method to resolve cases where the same <see cref="T:System.Xml.Linq.XName"/> is being assigned to more than one 
            <see cref="T:System.Type"/>. The first type parameter, <paramref name="type1"/>, is currently assigned the XName
            <paramref name="xName"/>. The second type parameter, <paramref name="type2"/>, is unassigned.
            </summary>
            <returns>The <see cref="T:System.Type"/> object that should be assigned the <see cref="T:System.Xml.Linq.XName"/>, or null if the
            assignment to that <see cref="T:System.Xml.Linq.XName"/> should be removed.</returns>
        </member>
        <member name="T:XMachine.Namers.DefaultXNamer">
            <summary>
            An implementation of <see cref="T:XMachine.XNamer"/> that generates <see cref="T:System.Xml.Linq.XName"/>s for <see cref="T:System.Type"/>s
            based on type names.
            </summary>
        </member>
        <member name="F:XMachine.Namers.DefaultXNamer.IncludesDeclaring">
            <summary>
            Whether this namer includes the declaring type/namespace/assembly in <see cref="T:System.Xml.Linq.XName"/>s.
            </summary>
        </member>
        <member name="F:XMachine.Namers.DefaultXNamer.IncludesNamespace">
            <summary>
            Whether this namer includes the declaring type/namespace/assembly in <see cref="T:System.Xml.Linq.XName"/>s.
            </summary>
        </member>
        <member name="F:XMachine.Namers.DefaultXNamer.IncludesAssembly">
            <summary>
            Whether this namer includes the declaring type/namespace/assembly in <see cref="T:System.Xml.Linq.XName"/>s.
            </summary>
        </member>
        <member name="M:XMachine.Namers.DefaultXNamer.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new <see cref="T:XMachine.Namers.DefaultXNamer"/>.
            </summary>
        </member>
        <member name="M:XMachine.Namers.DefaultXNamer.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Xml.Linq.XName},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new <see cref="T:XMachine.Namers.DefaultXNamer"/>.
            </summary>
        </member>
        <member name="M:XMachine.Namers.DefaultXNamer.GetName(System.Type)">
            <summary>
            Names the given type.
            </summary>
        </member>
        <member name="M:XMachine.Namers.DefaultXNamer.ParseXName(System.Xml.Linq.XName)">
            <summary>
            Attempt to parse an XName backward to a Type.
            </summary>
        </member>
        <member name="M:XMachine.Namers.DefaultXNamer.ResolveCollision(System.Xml.Linq.XName,System.Type,System.Type)">
            <summary>
            Ignores collisions.
            </summary>
        </member>
        <member name="T:XMachine.ObjectBuilder`1">
            <summary>
            The <see cref="T:XMachine.ObjectBuilder`1"/> class facilitates the construction of complex objects. Steps in the
            construction and modification of the object are divided into tasks that may complete in any order.
            </summary>
        </member>
        <member name="P:XMachine.ObjectBuilder`1.Object">
            <summary>
            Get or set the inner object being constructed by this <see cref="T:XMachine.ObjectBuilder`1"/>. This
            property may be set only once, unless <typeparamref name="T"/> is a value type.
            </summary>
        </member>
        <member name="P:XMachine.ObjectBuilder`1.IsConstructed">
            <summary>
            <c>true</c> if the inner object has been constructed, i.e. <see cref="P:XMachine.ObjectBuilder`1.Object"/> has been assigned.
            </summary>
        </member>
        <member name="M:XMachine.ObjectBuilder`1.AddTask(System.Func{System.Boolean})">
            <summary>
            Add a task to be performed by this <see cref="T:XMachine.ObjectBuilder`1"/>. The task will be attempted repeatedly
            in a loop with all other scheduled tasks registered with an <see cref="T:XMachine.IXReadOperation"/> and its
            <see cref="T:XMachine.ObjectBuilder`1"/>s. The task should return true when it has been successfully completed.
            </summary>
        </member>
        <member name="T:XMachine.ReaderHints">
            <summary>
            A bitflag containing hints that can be passed to <see cref="T:XMachine.IXReadOperation"/> by components.
            </summary>
        </member>
        <member name="F:XMachine.ReaderHints.Default">
            <summary>
            Default read behaviour, no hints.
            </summary>
        </member>
        <member name="F:XMachine.ReaderHints.IgnoreElementName">
            <summary>
            The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XElement"/> to be read has been overriden and should not be used 
            to resolve the <see cref="T:System.Type"/> of the serialized object.
            </summary>
        </member>
        <member name="T:XMachine.Reflection.MethodArgumentsMap">
            <summary>
            An object that wraps a <see cref="T:System.Reflection.MethodInfo"/> that may contain generic type arguments. Allows you to
            check provided arguments against that method's parameter constraints and to construct generic methods
            with type arguments discovered from provided argument types.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Create a new <see cref="T:XMachine.Reflection.MethodArgumentsMap"/> for the given method, generating a mapping
            between its parameters and its generic type arguments. Throws an <see cref="T:System.InvalidOperationException"/>
            if the method signature is such that the generic type arguments cannot be discovered from the
            parameter types alone -- for example, if one of the generic type arguments appears only in a 
            constraint on another generic type argument.
            </summary>
        </member>
        <member name="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition">
            <summary>
            Get the <see cref="T:System.Reflection.MethodInfo"/> object that represents this method (for a non-generic method)
            or its generic method definition.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.CanConstructMethodFor(System.Type[])">
            <summary>
            Checks that the given argument types satisfy all constraints on the method's parameters, meaning that
            an invokable generic method can be constructed from arguments of these types.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.MakeGenericMethod(System.Type[])">
            <summary>
            Constructs an invokable generic method, discovering the method's generic type arguments from the types
            of arguments given. If <see cref="M:XMachine.Reflection.MethodArgumentsMap.CanConstructMethodFor(System.Type[])"/> returns <c>false</c> on these
            argument types, this method returns null.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.Invoke(System.Object,System.Object[])">
            <summary>
            Construct and invoke this method definition on the given arguments, return the result. Throws an
            <see cref="T:System.InvalidOperationException"/> if the method cannot be constructed from the given arguments'
            types.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.TryInvoke(System.Object@,System.Object,System.Object[])">
            <summary>
            Attempt to discover the generic type arguments of <see cref="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition"/> from the types of the
            supplied arguments, and if possible, invoke a constructed version of the method on the given target
            using the given arguments.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.TryInvoke(System.Object,System.Object[])">
            <summary>
            Attempt to discover the generic type arguments of <see cref="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition"/> from the types of the
            supplied arguments, and if possible, invoke a constructed version of the method on the given target
            using the given arguments.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.Equals(System.Object)">
            <summary>
            True if <paramref name="obj"/> is a <see cref="T:XMachine.Reflection.MethodArgumentsMap"/> with an equal 
            <see cref="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition"/> property.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.GetHashCode">
            <summary>
            Return a hashcode based on <see cref="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition"/>.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.MethodArgumentsMap.ToString">
            <summary>
            Returns the string representation of <see cref="P:XMachine.Reflection.MethodArgumentsMap.MethodDefinition"/>.
            </summary>
        </member>
        <member name="T:XMachine.Reflection.ReflectionTools">
            <summary>
            Utility methods for objects in the <see cref="N:System.Reflection"/> namespace.
            </summary>
        </member>
        <member name="T:XMachine.Reflection.ReflectionTools.TypeContext">
            <summary>
            An enum representing the context in which a <see cref="T:System.Type"/> object is being used, which 
            determines whether covariance/contravariance is acceptable.
            </summary>
        </member>
        <member name="F:XMachine.Reflection.ReflectionTools.TypeContext.Default">
            <summary>
            The <see cref="T:System.Type"/> defines a variable, a base type, an interface, etc.
            </summary>
        </member>
        <member name="F:XMachine.Reflection.ReflectionTools.TypeContext.MethodParameter">
            <summary>
            The <see cref="T:System.Type"/> is being used as a method parameter: covariance (out) is not allowed.
            </summary>
        </member>
        <member name="F:XMachine.Reflection.ReflectionTools.TypeContext.MethodReturn">
            <summary>
            The <see cref="T:System.Type"/> is being used as the return type of a method: contravariance (in) is not allowed.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.HasCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Whether the given attribute is present.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.HasCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Whether the given attribute is present.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.CanCreateInstances(System.Type)">
            <summary>
            Returns <c>true</c> if and only if instances of this <see cref="T:System.Type"/> can be created, i.e. if it is not an
            unassigned generic parameter, contains no generic parameters, and is not an abstract class or interface.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.GetSelfAndBaseTypes(System.Type)">
            <summary>
            Returns a lazy enumerable over the curren type, followed by all the types from which this type directly inherits.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.CanCloseGenericParameter(System.Type,System.Type,XMachine.Reflection.ReflectionTools.TypeContext)">
            <summary>
            Checks if <paramref name="type"/> satisfies all constraints on <paramref name="parameter"/>.
            </summary>
        </member>
        <member name="M:XMachine.Reflection.ReflectionTools.InheritsFromGenericTypeDefinition(System.Type,System.Type,System.Type[]@)">
            <summary>
            Check if the closed <see cref="T:System.Type"/> <paramref name="type"/> or any of the classes or interfaces it 
            inherits or implements are a constructed generic type of the given generic type definition, 
            <paramref name="definition"/>.
            </summary>
        </member>
        <member name="T:XMachine.XCollator">
            <summary>
            A small utility class for reading and writing <see cref="T:System.Xml.Linq.XElement"/> objects to and from files. Each instance
            encompasses an instance of <see cref="T:System.Xml.XmlReaderSettings"/> and an instance of <see cref="T:System.Xml.XmlWriterSettings"/>.
            <see cref="T:XMachine.XCollator"/> has very little overhead, but for a default implementation, its methods are available
            statically in <see cref="T:XMachine.XmlTools"/>.
            </summary>
        </member>
        <member name="F:XMachine.XCollator.ReaderSettings">
            <summary>
            The <see cref="T:System.Xml.XmlReaderSettings"/> to be used when reading.
            </summary>
        </member>
        <member name="F:XMachine.XCollator.WriterSettings">
            <summary>
            The <see cref="T:System.Xml.XmlWriterSettings"/> to be used when writing.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.ReadFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.ReadFiles(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.ReadFile(System.String)">
            <summary>
            Reads the given XML file and returns its root element.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.ReadFile(System.IO.Stream)">
            <summary>
            Reads XML from the given <see cref="T:System.IO.Stream"/> and returns its root element.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.ReadFile(System.Xml.XmlReader)">
            <summary>
            Reads XML from the given <see cref="T:System.Xml.XmlReader"/> and returns the root element.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.WriteFile(System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given file.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.WriteFile(System.IO.Stream,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.WriteFile(System.Xml.XmlWriter,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.OnFileRead(System.Xml.Linq.XElement)">
            <summary>
            Called when a file has been read, but before its <see cref="T:System.Xml.Linq.XElement"/> value
            (<paramref name="root"/>) has been returned.
            </summary>
        </member>
        <member name="M:XMachine.XCollator.OnFileWrite(System.Xml.Linq.XElement)">
            <summary>
            Called immediately before an <see cref="T:System.Xml.Linq.XElement"/> (<paramref name="root"/>) is
            written to file.
            </summary>
        </member>
        <member name="T:XMachine.XComponents">
            <summary>
            <see cref="T:XMachine.XComponents"/> manages loaded <see cref="T:XMachine.XMachineComponent"/>s and provides convenient extension methods to
            customize their behaviour.
            </summary>
        </member>
        <member name="P:XMachine.XComponents.StartupErrors">
            <summary>
            A collection of <see cref="T:System.Exception"/>s that were generated during <see cref="T:XMachine.XDomain"/>'s initialization. These
            usually result from a failure to process a custom method tagged with one of the <see cref="N:XMachine"/>
            attributes.
            </summary>
        </member>
        <member name="P:XMachine.XComponents.ExceptionHandler">
            <summary>
            Get or set a delegate that will handle exceptions.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Component``1">
            <summary>
            Retrieve a component of the given type.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Components``1">
            <summary>
            Retrieve all components of the given type.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Components">
            <summary>
            Retrieve all components.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Register(XMachine.XMachineComponent)">
            <summary>
            Register a component.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Register(XMachine.XMachineComponent[])">
            <summary>
            Register components.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Deregister(XMachine.XMachineComponent)">
            <summary>
            Deegister a component.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Deegister(XMachine.XMachineComponent[])">
            <summary>
            Deegister components.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Identifier">
            <summary>
            Retrieve the collection of global identifiers in the <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> component, if it exists.
            </summary>
        </member>
        <member name="M:XMachine.XComponents.Identify``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Add an <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> characterized by the given delegate to the global identifiers 
            used by the <see cref="T:XMachine.Components.Identifiers.XIdentifiers"/> component, if it exists.
            </summary>
        </member>
        <member name="T:XMachine.XDomain">
            <summary>
            The <see cref="T:XMachine.XDomain"/> class hosts a set of <see cref="T:XMachine.XType`1"/> objects and instructions on how to resolve
            them from XML. It can generate <see cref="T:XMachine.XReader"/> and <see cref="T:XMachine.XWriter"/> objects to perform serialization
            and deserialization of objects.
            </summary>
        </member>
        <member name="P:XMachine.XDomain.Global">
            <summary>
            A global instance of the <see cref="T:XMachine.XDomain"/> class. The instance is not initialized until accessed for the first
            time. If set to null, it will be garbage collected and not re-instantiated until accessed again.
            </summary>
        </member>
        <member name="M:XMachine.XDomain.#ctor">
            <summary>
            Create a new instance of <see cref="T:XMachine.XDomain"/> using <see cref="T:XMachine.Namers.DefaultXNamer"/>.
            </summary>
        </member>
        <member name="M:XMachine.XDomain.#ctor(XMachine.XNamer)">
            <summary>
            Create a new <see cref="T:XMachine.XDomain"/> instance with the given <see cref="T:XMachine.XNamer"/>.
            </summary>
        </member>
        <member name="P:XMachine.XDomain.ExceptionHandler">
            <summary>
            Get or set a delegate that controls how exceptions are handled.
            </summary>
        </member>
        <member name="P:XMachine.XDomain.Namer">
            <summary>
            Get the <see cref="T:XMachine.XNamer"/> used by this instance.
            </summary>
        </member>
        <member name="M:XMachine.XDomain.Reflect``1">
            <summary>
            Returns an <see cref="T:XMachine.XType`1"/> object that controls how the provided type <typeparamref name="T"/> 
            will be read from and written to XML.
            </summary>
        </member>
        <member name="M:XMachine.XDomain.GetReader">
            <summary>
            Generates a new <see cref="T:XMachine.XReader"/> object that can be used to perform a read operation within this
            <see cref="T:XMachine.XDomain"/>.
            </summary>
        </member>
        <member name="M:XMachine.XDomain.GetWriter">
            <summary>
            Generates a new <see cref="T:XMachine.XWriter"/> object that can be used to perform a write operation within this 
            <see cref="T:XMachine.XDomain"/>.
            </summary>
        </member>
        <member name="T:XMachine.XExtensionMethods">
            <summary>
            Extension methods for various classes in <see cref="N:XMachine"/>, gathered here to keep class files clean.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Enable(XMachine.IXComponent)">
            <summary>
            Enable a component.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Disable(XMachine.IXComponent)">
            <summary>
            Disable all components.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Enable(System.Collections.Generic.IEnumerable{XMachine.IXComponent})">
            <summary>
            Enable all components.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Disable(System.Collections.Generic.IEnumerable{XMachine.IXComponent})">
            <summary>
            Disable all components.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Constructor``1(XMachine.XType{``0})">
            <summary>
            Retrieve the delegate used to construct objects of this <see cref="T:XMachine.XType`1"/>, if it exists.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Constructor``1(XMachine.XType{``0},System.Func{``0})">
            <summary>
            Set a delegate that will be used to construct objects of this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Properties``1(XMachine.XType{``0})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component from the given <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Property``2(XMachine.XType{``0},System.Xml.Linq.XName)">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Properties.XProperty`2"/> with the given <see cref="T:System.Type"/> and <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Property``2(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Properties.XProperty`2"/> identified by the given expression.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.AddProperty``2(XMachine.XType{``0},System.Xml.Linq.XName,System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Creates a property with the given name, get accessor and set accessor and adds it to this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.AddProperty``2(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})">
            <summary>
            Creates a property representing the class member (a field or property) identified in <paramref name="memberExpression"/>.
            This method can be used to add properties that represent members not automatically recognized, such as fields and
            nonpublic properties.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``2(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``2(XMachine.XType{``0},XMachine.Components.Properties.XProperty{``0,``1},System.Func{``1,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``3(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``3(XMachine.XType{``0},XMachine.Components.Properties.XProperty{``0,``1},XMachine.Components.Properties.XProperty{``0,``2},System.Func{``1,``2,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``4(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Func{``1,``2,``3,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``4(XMachine.XType{``0},XMachine.Components.Properties.XProperty{``0,``1},XMachine.Components.Properties.XProperty{``0,``2},XMachine.Components.Properties.XProperty{``0,``3},System.Func{``1,``2,``3,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``5(XMachine.XType{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Func{``1,``2,``3,``4,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ConstructWith``5(XMachine.XType{``0},XMachine.Components.Properties.XProperty{``0,``1},XMachine.Components.Properties.XProperty{``0,``2},XMachine.Components.Properties.XProperty{``0,``3},XMachine.Components.Properties.XProperty{``0,``4},System.Func{``1,``2,``3,``4,``0})">
            <summary>
            Instruct the <see cref="T:XMachine.Components.Properties.XProperties`1"/> component to deserialize the given property before construction,
            then pass it as a parameter to the constructor. Disables the default constructor.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Texter``1(XMachine.XType{``0})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.XTexter`1"/> component on this <see cref="T:XMachine.XType`1"/>, if it exists.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Texter``1(XMachine.XType{``0},System.Func{System.String,``0},System.Func{``0,System.String},System.Boolean)">
            <summary>
            Set delegates to read and write this <see cref="T:XMachine.XType`1"/> from text. This method automatically disables all 
            other <see cref="T:XMachine.XTypeComponent`1"/> objects on this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Collection``1(XMachine.XType{``0})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Collections.XCollection`1"/> on this <see cref="T:XMachine.XType`1"/>, if it exists.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Collection``2(XMachine.XType{``0})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Collections.XCollection`2"/> on this <see cref="T:XMachine.XType`1"/>, if it exists.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Builder``1(XMachine.XType{``0})">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.XBuilder`1"/> object being used to serialize and deserialize objects of this
            <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Builder``1(XMachine.XType{``0},XMachine.Components.XBuilder{``0},System.Boolean)">
            <summary>
            Set the <see cref="T:XMachine.Components.XBuilder`1"/> object used to serialize and deserialize objects of this <see cref="T:XMachine.XType`1"/>.
            This method automatically disables all other <see cref="T:XMachine.XTypeComponent`1"/> objects on this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Builder``1(XMachine.XType{``0},System.Action{XMachine.XType{``0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{``0}},System.Func{XMachine.XType{``0},XMachine.IXWriteOperation,``0,System.Xml.Linq.XElement,System.Boolean},System.Boolean)">
            <summary>
            Set the <see cref="T:XMachine.Components.XBuilder`1"/> object used to serialize and deserialize objects of this <see cref="T:XMachine.XType`1"/>
            using delegates for the read and write methods. This method automatically disables all other <see cref="T:XMachine.XTypeComponent`1"/> 
            objects on this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Identifier(XMachine.XReader)">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> being used by the <see cref="T:XMachine.Components.Identifiers.XIdentifierReader"/> component
            on this <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Identify``2(XMachine.XReader,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Add an <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> characterized by the given delegate to the <see cref="T:XMachine.Components.Identifiers.XIdentifierReader"/>
            component on this <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Identifier(XMachine.XWriter)">
            <summary>
            Retrieve the <see cref="T:XMachine.Components.Identifiers.XCompositeIdentifier"/> being used by the <see cref="T:XMachine.Components.Identifiers.XIdentifierWriter"/> component
            on this <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Identify``2(XMachine.XWriter,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Add an <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> characterized by the given delegate to the <see cref="T:XMachine.Components.Identifiers.XIdentifierWriter"/>
            component on this <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XReader,System.String)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XReader,System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XReader,System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XReader,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XReader,System.String)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XReader,System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XReader,System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XReader,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XReader,System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XReader,System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XReader,System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XReader,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XReader,System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XReader,System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XReader,System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XReader,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XReader,XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XReader,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XReader,System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With(XMachine.XReader,System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteTo(XMachine.XWriter,System.Object,System.String)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteTo(XMachine.XWriter,System.Object,System.IO.Stream)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XWriter,System.Collections.IEnumerable,System.String,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XWriter,System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XWriter,System.Collections.IEnumerable,System.String,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XWriter,System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XWriter,XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XWriter,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With``2(XMachine.XWriter,System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the 
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.With(XMachine.XWriter,System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to the <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Read(XMachine.XDomain,System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Read``1(XMachine.XDomain,System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object assignable to <typeparamref name="T"/>, using a 
            new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadAll(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadAll``1(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects assignable to <typeparamref name="T"/>, using a 
            new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XDomain,System.String)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XDomain,System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XDomain,System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XDomain,System.String)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XDomain,System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XDomain,System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadFrom``1(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XDomain,System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XDomain,System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XDomain,System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XDomain,System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XDomain,System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XDomain,System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadElementsFrom``1(XMachine.XDomain,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadWith``2(XMachine.XDomain,XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadWith``2(XMachine.XDomain,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadWith``2(XMachine.XDomain,System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.ReadWith(XMachine.XDomain,System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.Write(XMachine.XDomain,System.Object)">
            <summary>
            Attempts to write the given object as an <see cref="T:System.Xml.Linq.XElement"/>, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteAll(XMachine.XDomain,System.Collections.IEnumerable)">
            <summary>
            Attempts to write the given collection of objects as <see cref="T:System.Xml.Linq.XElement"/>s, using a new instance of 
            <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteTo(XMachine.XDomain,System.Object,System.String)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteTo(XMachine.XDomain,System.Object,System.IO.Stream)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XDomain,System.Collections.IEnumerable,System.String,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XDomain,System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XDomain,System.Collections.IEnumerable,System.String,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteToElements(XMachine.XDomain,System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteWith``2(XMachine.XDomain,XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteWith``2(XMachine.XDomain,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new  
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteWith``2(XMachine.XDomain,System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new  
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XExtensionMethods.WriteWith(XMachine.XDomain,System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="T:XMachine.XIgnoreAttribute">
            <summary>
            You may tag any type, property, constructor or assembly with this attribute to instruct
            <see cref="N:XMachine"/> to ignore it. The tagged member (as well as its subclasses and nested types)
            will not be read from or written to XML and will not be searched for customization methods or fields.
            </summary>
        </member>
        <member name="T:XMachine.XMachineAssemblyAttribute">
            <summary>
            Assemblies that wish to use attributes to customize how <see cref="N:XMachine"/> reads and writes
            XML must tag themselves with this attribute. Simply add <c>[assembly: XMachine.XMachineAssembly]</c> 
            to any file in your project.
            </summary>
        </member>
        <member name="P:XMachine.XMachineAssemblyAttribute.PropertyAccess">
            <summary>
            Get or set the recommended property access level for <see cref="T:System.Type"/>s defined in this
            <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="P:XMachine.XMachineAssemblyAttribute.ConstructorAccess">
            <summary>
            Get or set the recommended constructor access level for <see cref="T:System.Type"/>s defined in this
            <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="T:XMachine.XMachineComponent">
            <summary>
            Implement this class to extend the functionality of <see cref="N:XMachine"/>. Register your component
            with <see cref="M:XMachine.XComponents.Register(XMachine.XMachineComponent[])"/>. An <see cref="T:XMachine.XMachineComponent"/> will 
            be fed <see cref="T:System.Type"/> objects scanned from loaded assemblies that have the <see cref="T:XMachine.XMachineAssemblyAttribute"/>, 
            then given the opportunity to modify <see cref="T:XMachine.XDomain"/>, <see cref="T:XMachine.XReader"/>, 
            <see cref="T:XMachine.XWriter"/> and <see cref="T:XMachine.XType`1"/> objects as they are instantiated.
            </summary>
        </member>
        <member name="P:XMachine.XMachineComponent.Enabled">
            <summary>
            Whether the component is enabled.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnInspectType(System.Type)">
            <summary>
            Called when <see cref="N:XMachine"/> is initialized and scans <see cref="T:System.Type"/> objects from assemblies
            tagged with <see cref="T:XMachine.XMachineAssemblyAttribute"/>.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnCreateDomain(XMachine.XDomain)">
            <summary>
            Called when a new instance of <see cref="T:XMachine.XDomain"/> is created.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnCreateXType``1(XMachine.XType{``0})">
            <summary>
            Called when a new instance of <see cref="T:XMachine.XType`1"/> is created.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnCreateXTypeLate``1(XMachine.XType{``0})">
            <summary>
            Called when a new instance of <see cref="T:XMachine.XType`1"/> is created, after <see cref="M:XMachine.XMachineComponent.OnCreateXType``1(XMachine.XType{``0})"/>.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnCreateReader(XMachine.XReader)">
            <summary>
            Called when a new <see cref="T:XMachine.XReader"/> is created.
            </summary>
        </member>
        <member name="M:XMachine.XMachineComponent.OnCreateWriter(XMachine.XWriter)">
            <summary>
            Called when a new <see cref="T:XMachine.XWriter"/> is created.
            </summary>
        </member>
        <member name="T:XMachine.XmlTools">
            <summary>
            Provides utility methods for reading and writing XML.
            </summary>
        </member>
        <member name="F:XMachine.XmlTools.XmlReservedCharsPattern">
            <summary>
            A regular expression pattern that matches the XML reserved characters: &lt;&gt;&quot;&apos;&amp;
            </summary>
        </member>
        <member name="F:XMachine.XmlTools.NumberStyles">
            <summary>
            Culture-invariant number styles for XML: optional leading sign for negative numbers and periods for decimals.
            </summary>
        </member>
        <member name="F:XMachine.XmlTools.DateTimeStyles">
            <summary>
            Culture-invariant default date/time styles for XML.
            </summary>
        </member>
        <member name="F:XMachine.XmlTools.InvariantCulture">
            <summary>
            The invariant culture object, used in XML so that code can be portable across systems.
            </summary>
        </member>
        <member name="P:XMachine.XmlTools.XmlReservedChars">
            <summary>
            The XML reserved characters: { &lt;, &gt;, &quot;, &apos;, &amp; }
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFiles(System.String[])">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFiles(System.IO.Stream[])">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFiles(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Reads each of the given XML files, producing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> over the root
            elements of the files.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFile(System.String)">
            <summary>
            Reads the given XML file and returns its root element.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFile(System.IO.Stream)">
            <summary>
            Reads XML from the given <see cref="T:System.IO.Stream"/> and returns its root element.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFile(System.Xml.XmlReader)">
            <summary>
            Reads XML from the given <see cref="T:System.Xml.XmlReader"/> and returns the root element.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteFile(System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given file.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteFile(System.IO.Stream,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteFile(System.Xml.XmlWriter,System.Xml.Linq.XElement)">
            <summary>
            Writes the given <see cref="T:System.Xml.Linq.XElement"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Ignore(System.Reflection.Assembly)">
            <summary>
            Ignore the given <see cref="T:System.Type"/>, blocking <see cref="N:XMachine"/> from using it or its types.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Ignore(System.Type)">
            <summary>
            Ignore the given <see cref="T:System.Type"/>, blocking <see cref="N:XMachine"/> from serializing it or scanning it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.GetAttributeOrElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Searches the direct members of an <see cref="T:System.Xml.Linq.XElement"/> for an attribute, then an element, with 
            the given <see cref="T:System.Xml.Linq.XName"/>. If found, its text content is returned; if not, <c>null</c>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadInnerXml(System.Xml.Linq.XElement)">
            <summary>
            Read the inner XML of the given <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteInnerXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            Write a <see cref="T:System.String"/> to the given <see cref="T:System.Xml.Linq.XElement"/> as raw XML.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadBool(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Boolean"/> from text, returning <c>false</c> if unsuccessful. Performs
            a case-insensitive, culture-invariant comparison against <see cref="F:System.Boolean.TrueString"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadBool(System.String,System.String[])">
            <summary>
            Attempts to read a <see cref="T:System.Boolean"/> from text, returning <c>false</c> if unsuccessful. Performs
            a case-insensitive, culture-invariant comparison against <see cref="F:System.Boolean.TrueString"/>, plus any 
            of the monikers you provide. If any match, this method returns true.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadByte(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Byte"/> from text, returning <c>0</c> if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadChar(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Char"/> from text, returning a null character (\0) if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadDateTime(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.DateTime"/> from text, returning <see cref="F:System.DateTime.MinValue"/> 
            if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadDecimal(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Decimal"/> from text, returning zero (0M) if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadDouble(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Double"/> from text, returning zero (0.0D) if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadShort(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Int16"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadInt(System.String)">
            <summary>
            Attempts to read an <see cref="T:System.Int32"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadLong(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Int64"/> from text, returning 0L if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadSByte(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.SByte"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFloat(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Single"/> from text, returning 0.0F if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadUShort(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.UInt16"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadUInt(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.UInt32"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadULong(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.UInt64"/> from text, returning 0 if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadEnum``1(System.String)">
            <summary>
            Attempts to read a member of the enum <typeparamref name="T"/> from text, returning the default
            member if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadVersion(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Version"/> from text, returning <c>null</c> if unavailable.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadBigInteger(System.String)">
            <summary>
            Attempts to read a <see cref="T:System.Numerics.BigInteger"/> from text, returning zero if unsuccessful.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteText(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XText"/> node containing the given string. The string is checked for reserved XML 
            characters, and if any are found, the returned <see cref="T:System.Xml.Linq.XText"/> is an <see cref="T:System.Xml.Linq.XCData"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Boolean)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Byte)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.DateTime)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Decimal)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Double)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Int16)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Int32)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Int64)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.SByte)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Single)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.UInt16)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.UInt32)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.UInt64)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Version)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Numerics.BigInteger)">
            <summary>
            Writes the given object as a string
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Read(System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Read``1(System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object assignable to <typeparamref name="T"/>, using a 
            new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadAll``1(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects assignable to <typeparamref name="T"/>, using a 
            new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom(System.String)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom(System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom(System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom``1(System.String)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom``1(System.IO.Stream)">
            <summary>
            Attempts to read the root element of the given file as an object as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom``1(System.String[])">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadFrom``1(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the root elements of the given files as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom(System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom(System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom(System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom``1(System.String)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom``1(System.IO.Stream)">
            <summary>
            Attempts to read the child elements of the root element of the given file as a collection of objects assignable to
            <typeparamref name="T"/>, using a new instance of <see cref="T:XMachine.XReader"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom``1(System.String[])">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadElementsFrom``1(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Attempts to read the child elements of the root elements of the given files as a collection of objects assignable to
            <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadWith``2(XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadWith``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadWith``2(System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.ReadWith(System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new <see cref="T:XMachine.XReader"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.Write(System.Object)">
            <summary>
            Attempts to write the given object as an <see cref="T:System.Xml.Linq.XElement"/>, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteAll(System.Collections.IEnumerable)">
            <summary>
            Attempts to write the given collection of objects as <see cref="T:System.Xml.Linq.XElement"/>s, using a new instance of 
            <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteTo(System.Object,System.String)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteTo(System.Object,System.IO.Stream)">
            <summary>
            Attempts to write the given object as the root element of the given file, using a new instance of <see cref="T:XMachine.XWriter"/>.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteToElements(System.Collections.IEnumerable,System.String,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteToElements(System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XName)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of a root element
            with the given name (default is 'XML').
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteToElements(System.Collections.IEnumerable,System.String,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteToElements(System.Collections.IEnumerable,System.IO.Stream,System.Xml.Linq.XElement)">
            <summary>
            Attempts to write the given collection of objects to the given file as child elements of the given root element.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteWith``2(XMachine.Components.Identifiers.XIdentifier{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new 
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteWith``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new  
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteWith``2(System.Func{``0,``1},System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:XMachine.Components.Identifiers.XIdentifier`2"/> and <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new  
            <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="M:XMachine.XmlTools.WriteWith(System.Collections.IEnumerable)">
            <summary>
            Add the given <see cref="T:System.Collections.IEnumerable"/> of contextual objects to a new <see cref="T:XMachine.XWriter"/>, then return it.
            </summary>
        </member>
        <member name="T:XMachine.XNameAttribute">
            <summary>
            <see cref="T:XMachine.XNameAttribute"/> instructs <see cref="N:XMachine"/> that a <see cref="T:System.Type"/> or property
            should be serialized under a different <see cref="F:XMachine.XNameAttribute.Name"/> in XML.
            </summary>
        </member>
        <member name="F:XMachine.XNameAttribute.Name">
            <summary>
            The text of the <see cref="F:XMachine.XNameAttribute.Name"/> that will be used for this type or member.
            </summary>
        </member>
        <member name="M:XMachine.XNameAttribute.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:XMachine.XNameAttribute"/> with the given <see cref="F:XMachine.XNameAttribute.Name"/>. Throws an 
            exception if the provided name is invalid.
            </summary>
        </member>
        <member name="T:XMachine.XNamer">
            <summary>
            This critical utility resolves XML to <see cref="M:XMachine.XNamer.Type(System.Xml.Linq.XElement,System.Type)"/>s via <see cref="T:System.Xml.Linq.XName"/>, and vice versa.
            </summary>
        </member>
        <member name="P:XMachine.XNamer.Item(System.Type)">
            <summary>
            Get or set the <see cref="T:System.Xml.Linq.XName"/> associated with the given <see cref="M:XMachine.XNamer.Type(System.Xml.Linq.XElement,System.Type)"/>.
            </summary>
        </member>
        <member name="P:XMachine.XNamer.ExceptionHandler">
            <summary>
            A delegate that will handle exceptions generated by <see cref="T:XMachine.XNamer"/>.
            </summary>
        </member>
        <member name="M:XMachine.XNamer.OnAssemblyScan(System.Reflection.Assembly)">
            <summary>
            Called when <see cref="N:XMachine"/> scans a new <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:XMachine.XNamer.GetType(System.Xml.Linq.XElement,System.Type)">
            <summary>
            Returns the <see cref="M:XMachine.XNamer.Type(System.Xml.Linq.XElement,System.Type)"/> to which this <see cref="T:System.Xml.Linq.XElement"/> corresponds.
            </summary>
        </member>
        <member name="T:XMachine.XReader">
            <summary>
            <see cref="T:XMachine.XReader"/> provides the public API for XML reading operations.
            </summary>
        </member>
        <member name="M:XMachine.XReader.Read(System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object.
            </summary>
        </member>
        <member name="M:XMachine.XReader.Read``1(System.Xml.Linq.XElement)">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/> as an object assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XReader.ReadAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects.
            </summary>
        </member>
        <member name="M:XMachine.XReader.ReadAll``1(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Attempts to read the given <see cref="T:System.Xml.Linq.XElement"/>s as objects assignable to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XReader.Submit(System.Object)">
            <summary>
            Submit a contextual object to the <see cref="T:XMachine.XReader"/>. A contextual object will be 
            available to <see cref="T:XMachine.XReaderComponent"/>s.
            </summary>
        </member>
        <member name="M:XMachine.XReader.SubmitAll(System.Collections.IEnumerable)">
            <summary>
            Submit contextual objects to the <see cref="T:XMachine.XReader"/>. A contextual object will be 
            available to <see cref="T:XMachine.XReaderComponent"/>s.
            </summary>
        </member>
        <member name="T:XMachine.XReaderComponent">
            <summary>
            A component to <see cref="T:XMachine.IXReadOperation"/> has several entry points where it can execute behaviour during a
            read operation.
            </summary>
        </member>
        <member name="P:XMachine.XReaderComponent.Enabled">
            <summary>
            Whether the component is enabled.
            </summary>
        </member>
        <member name="M:XMachine.XReaderComponent.OnRead(XMachine.IXReadOperation,System.Xml.Linq.XElement,System.Type,System.Func{System.Object,System.Boolean},System.Func{System.Boolean}@)">
            <summary>
            Called at the start of any read operation on an <see cref="T:System.Xml.Linq.XElement"/>. Return true if all further processing
            of this <see cref="T:System.Xml.Linq.XElement"/> should stop.
            </summary>
        </member>
        <member name="M:XMachine.XReaderComponent.OnRead(XMachine.IXReadOperation,System.Xml.Linq.XAttribute,System.Type,System.Func{System.Object,System.Boolean},System.Func{System.Boolean}@)">
            <summary>
            Called at the start of any read operation on an <see cref="T:System.Xml.Linq.XAttribute"/>. Return true if all further processing
            of this <see cref="T:System.Xml.Linq.XAttribute"/> should stop.
            </summary>
        </member>
        <member name="M:XMachine.XReaderComponent.OnSubmit(XMachine.IXReadOperation,System.Object,System.Func{System.Boolean}@)">
            <summary>
            Called whenever an object is submitted to <see cref="T:XMachine.IXReadOperation"/>, which occurs either because the user
            has submitted a contextual object or because an object was successfully read from XML.
            </summary>
        </member>
        <member name="T:XMachine.XType`1">
            <summary>
            <see cref="T:XMachine.XType`1"/> is a wrapper around a <see cref="T:System.Type"/> that stores information on how its 
            instances should be read and written to XML. Its functionality can be extended through 
            <see cref="T:XMachine.XTypeComponent`1"/>.
            </summary>
        </member>
        <member name="P:XMachine.XType`1.Domain">
            <summary>
            The <see cref="T:XMachine.XDomain"/> instance to which this <see cref="T:XMachine.XType`1"/> belongs.
            </summary>
        </member>
        <member name="P:XMachine.XType`1.Name">
            <summary>
            The <see cref="P:XMachine.XType`1.Name"/> that will represent this <see cref="T:System.Type"/> in XML. To customize this, modify
            the <see cref="T:XMachine.XNamer"/> at <see cref="P:XMachine.XDomain.Namer"/>.
            </summary>
        </member>
        <member name="M:XMachine.XType`1.Equals(XMachine.XType{`0})">
            <summary>
            <c>true</c> if and only if these <see cref="T:XMachine.XType`1"/>s belong to the same <see cref="T:XMachine.XDomain"/>.
            </summary>
        </member>
        <member name="M:XMachine.XType`1.Equals(System.Object)">
            <summary>
            <c>true</c> if and only if these <see cref="T:XMachine.XType`1"/>s are the same <typeparamref name="T"/>
            and belong to the same <see cref="T:XMachine.XDomain"/>.
            </summary>
        </member>
        <member name="M:XMachine.XType`1.GetHashCode">
            <summary>
            A hashcode implemented through <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XType`1.ToString">
            <summary>
            Returns 'XType&lt;TType&gt;', where TType is typeof(<typeparamref name="T"/>).FullName.
            </summary>
        </member>
        <member name="T:XMachine.XTypeComponent`1">
            <summary>
            A component for <see cref="T:XMachine.XType`1"/> can enable custom reading and writing behaviour that applies
            only to objects of specific <see cref="T:System.Type"/>s.
            </summary>
        </member>
        <member name="P:XMachine.XTypeComponent`1.Enabled">
            <summary>
            Whether the component is enabled.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnInitialized(XMachine.XType{`0})">
            <summary>
            Called after the <see cref="T:XMachine.XType`1"/> has been created and all <see cref="T:XMachine.XMachineComponent"/>s
            have been informed.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnRead(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,System.Type,`0@)">
            <summary>
            Called when the <see cref="T:XMachine.IXReadOperation"/> arrives at an <see cref="T:System.Xml.Linq.XElement"/> and begins reading. This
            method should return true only if the <see cref="T:System.Xml.Linq.XElement"/> was successfully deserialized and the read
            operation should end. Provide the result of the operation in the out parameter: the result can either be
            an <see cref="T:XMachine.ObjectBuilder`1"/> or an object of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnRead(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XAttribute,System.Type,`0@)">
            <summary>
            Called when the <see cref="T:XMachine.IXReadOperation"/> arrives at an <see cref="T:System.Xml.Linq.XAttribute"/> and begins reading. This
            method should return true only if the <see cref="T:System.Xml.Linq.XAttribute"/> was successfully deserialized and the read
            operation should end. Provide the result of the operation in the out parameter: the result can either be
            an <see cref="T:XMachine.ObjectBuilder`1"/> or an object of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnBuild(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,XMachine.ObjectBuilder{`0})">
            <summary>
            Called after <see cref="M:XMachine.XTypeComponent`1.OnRead(XMachine.XType{`0},XMachine.IXReadOperation,System.Xml.Linq.XElement,System.Type,`0@)"/> returned false for
            all <see cref="T:XMachine.XTypeComponent`1"/>s on this <see cref="T:XMachine.XType`1"/>.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XElement)">
            <summary>
            Called by <see cref="T:XMachine.IXWriteOperation"/> when it needs to write an object belonging to this <see cref="T:XMachine.XType`1"/>.
            This method should return true only if the <see cref="T:System.Xml.Linq.XElement"/> was successfully serialized and the write
            operation should end.
            </summary>
        </member>
        <member name="M:XMachine.XTypeComponent`1.OnWrite(XMachine.XType{`0},XMachine.IXWriteOperation,`0,System.Xml.Linq.XAttribute)">
            <summary>
            Called by <see cref="T:XMachine.IXWriteOperation"/> when it needs to write an object belonging to this <see cref="T:XMachine.XType`1"/>.
            This method should return true only if the <see cref="T:System.Xml.Linq.XAttribute"/> was successfully serialized and the write
            operation should end.
            </summary>
        </member>
        <member name="T:XMachine.XWithComponents`1">
            <summary>
            Represents an object within <see cref="N:XMachine"/> whose functionality is represented by
            components, which are objects of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:XMachine.XWithComponents`1"/> to manage components of the given
            type.
            </summary>
        </member>
        <member name="P:XMachine.XWithComponents`1.ExceptionHandler">
            <summary>
            The delegate that handles exceptions thrown by components.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Component``1">
            <summary>
            Retrieve a component of the given type.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Components``1">
            <summary>
            Retrieve all components of the given type.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Components">
            <summary>
            Retrieve all components.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Register(`0)">
            <summary>
            Register a component.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Register(`0[])">
            <summary>
            Register components.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Deregister(`0)">
            <summary>
            Deregister a component.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.Deregister(`0[])">
            <summary>
            Deregister components.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.ForEachComponent(System.Action{`0})">
            <summary>
            Perform a delegate on each enabled component. Any exceptions thrown by delegates will be caught and handled 
            by <see cref="P:XMachine.XWithComponents`1.ExceptionHandler"/>.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.ForEachComponent``1(System.Func{`0,``0})">
            <summary>
            Perform a delegate on each enabled component and return a lazy enumeration of the return values. 
            Any exceptions thrown by delegates will be caught and handled by <see cref="P:XMachine.XWithComponents`1.ExceptionHandler"/>;
            their return values will be excluded from the enumeration.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.ForEachComponent``1(System.Func{`0,``0},System.Predicate{``0})">
            <summary>
            Perform a delegate on each enabled component, stopping when the given predicate over the 
            delegate's return values evaluates to true. The return value is the return value at which
            this method stopped or, if the predicate was never true, a default value. Any exceptions thrown 
            by delegates will be caught and handled by <see cref="P:XMachine.XWithComponents`1.ExceptionHandler"/>.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.ForEachComponent(System.Func{`0,System.Boolean})">
            <summary>
            Perform a delegate on each enabled component, stopping when the first of them returns true. The return
            value is true if any component return true. Any exceptions thrown by delegates will be
            caught and handled by <see cref="P:XMachine.XWithComponents`1.ExceptionHandler"/>.
            </summary>
        </member>
        <member name="M:XMachine.XWithComponents`1.OnComponentsRegistered(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Extend this method to perform additional behaviour when new components are registered.
            </summary>
        </member>
        <member name="T:XMachine.XWriter">
            <summary>
            <see cref="T:XMachine.XWriter"/> provides the public API for simple XML writing operations.
            </summary>
        </member>
        <member name="M:XMachine.XWriter.Submit(System.Object)">
            <summary>
            Submit a contextual object to the <see cref="T:XMachine.XWriter"/>. A contextual object will be available to
            <see cref="T:XMachine.XWriterComponent"/>s, but it will not itself be written to XML.
            </summary>
        </member>
        <member name="M:XMachine.XWriter.SubmitAll(System.Collections.IEnumerable)">
            <summary>
            Submit contextual objects to the <see cref="T:XMachine.XWriter"/>. A contextual object will be 
            available to <see cref="T:XMachine.XWriterComponent"/>s.
            </summary>
        </member>
        <member name="M:XMachine.XWriter.Write(System.Object)">
            <summary>
            Attempts to write the given object as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:XMachine.XWriter.WriteAll(System.Collections.IEnumerable)">
            <summary>
            Attempts to write the given collection of objects as <see cref="T:System.Xml.Linq.XElement"/>s.
            </summary>
        </member>
        <member name="T:XMachine.XWriterComponent">
            <summary>
            A component for <see cref="T:XMachine.IXWriteOperation"/> class, which performs a single XML writing operation.
            </summary>
        </member>
        <member name="P:XMachine.XWriterComponent.Enabled">
            <summary>
            Whether the component is enabled.
            </summary>
        </member>
        <member name="M:XMachine.XWriterComponent.OnWrite(XMachine.IXWriteOperation,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Called when an <see cref="T:System.Xml.Linq.XElement"/> has been created in the context of an <see cref="T:System.Object"/>, but
            before any XML has been added.
            </summary>
        </member>
        <member name="M:XMachine.XWriterComponent.OnWrite(XMachine.IXWriteOperation,System.Object,System.Xml.Linq.XAttribute)">
            <summary>
            Called when an <see cref="T:System.Xml.Linq.XAttribute"/> has been created in the context of an <see cref="T:System.Object"/>, but
            before any XML has been added.
            </summary>
        </member>
        <member name="M:XMachine.XWriterComponent.OnSubmit(XMachine.IXWriteOperation,System.Object)">
            <summary>
            Called whenever an object is submitted to <see cref="T:XMachine.IXWriteOperation"/>, which occurs either because the user
            has submitted a contextual object or because an object was successfully written to XML.
            </summary>
        </member>
    </members>
</doc>
