using System;
using System.Reflection;
using System.Xml.Linq;

namespace XMachine
{
	/// <summary>
	/// This critical utility resolves XML to <see cref="Type"/>s via <see cref="XName"/>, and vice versa.
	/// </summary>
	public abstract class XNamer : IExceptionHandler
	{
		/// <summary>
		/// Get or set the <see cref="XName"/> associated with the given <see cref="Type"/>.
		/// </summary>
		public abstract XName this[Type type] { get; set; }

		/// <summary>
		/// A delegate that will handle exceptions generated by <see cref="XNamer"/>.
		/// </summary>
		public Action<Exception> ExceptionHandler { get; set; }

		/// <summary>
		/// Reset the <see cref="XNamer"/>, clearing out any internal mappings between <see cref="Type"/>s and XML.
		/// </summary>
		public abstract void Reset();

		/// <summary>
		/// Called when <see cref="XMachine"/> scans a new <see cref="Assembly"/>.
		/// </summary>
		protected abstract void OnAssemblyScan(Assembly assembly);

		/// <summary>
		/// Returns the <see cref="GetTypeInternal"/> to which this <see cref="XElement"/> corresponds.
		/// </summary>
		protected abstract Type GetType(XElement element, Type expectedType);

		internal void ScanInternal(Assembly assembly) => OnAssemblyScan(assembly);

		internal Type GetTypeInternal(XElement element, Type expectedType) => GetType(element, expectedType);
	}
}
